<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Poll Changes &amp; Send to Server"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
-- Edit these variables to your liking
URL = "http://localhost/results" -- URL where the data gets sent to
AccessToken = "xxxx"
local poll_rate = 1000 -- How much time in miliseconds will this script poll for changes
DiffHandler = {'standing', 'character', 'percentage'} -- Set to "standing" to only send data to server when standings are set, "character" for when characters change, etc. Leave as a blank table "{}" to catch any change.

GameSpeed = 1.25 -- Set this to another value you'd like to have during matches. This is for AetherBet, use at your own risk!

-- Rivals of Aether memory addresses
MemoryAddresses = {
  access_token = AccessToken,
  P1StocksLost = nil,
  P1Percentage = nil,
  P1Standing = nil,
  P1Character = nil,
  P2StocksLost = nil,
  P2Percentage = nil,
  P2Standing = nil,
  P2Character = nil,
  P3StocksLost = nil,
  P3Percentage = nil,
  P3Standing = nil,
  P3Character = nil,
  P4StocksLost = nil,
  P4Percentage = nil,
  P4Standing = nil,
  P4Character = nil,
  IsWorkshopEnabled = nil
  IsInMatch = nil
}
-- Addresses from previous poll. Used to determine if changes were made.
PreviousAddresses = {
  access_token = AccessToken,
  P1StocksLost = nil,
  P1Percentage = nil,
  P1Standing = nil,
  P1Character = nil,
  P2StocksLost = nil,
  P2Percentage = nil,
  P2Standing = nil,
  P2Character = nil,
  P3StocksLost = nil,
  P3Percentage = nil,
  P3Standing = nil,
  P3Character = nil,
  P4StocksLost = nil,
  P4Percentage = nil,
  P4Standing = nil,
  P4Character = nil,
  IsWorkshopEnabled = nil
  IsInMatch = nil
}

-- Force lua engine to not show when there are errors
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

if syntaxcheck then return end
if not scriptTimers then scriptTimers = {} end

-- Helper function to copy one table's data to another
local function copyTable(src)
  local dest = {}
  for key, value in pairs(src) do
    if type(value) == "table" then
      dest[key] = copyTable(value)
    else
      dest[key] = value
    end
  end
  return dest
end

-- Helper function to find values in tables
local function has_value (tab, val)
    for index, value in ipairs(tab) do
        if value == val then
            return true
        end
    end

    return false
end

local urlencodeTable = function(tbl)
    local function urlencode(str)
        if str then
            str = string.gsub(str, "([^%w])", function(c)
                return string.format("%%%02X", string.byte(c))
            end)
        end
        return str
    end

    local encoded_parts = {}
    for k, v in pairs(tbl) do
        local key = urlencode(tostring(k))
        local value = urlencode(tostring(v))
        table.insert(encoded_parts, key .. "=" .. value)
    end
    return table.concat(encoded_parts, "&amp;")
end

-- Function to send data to your HTTP server
local sendToServer = function(data)
  data = urlencodeTable(data)
  local internet = getInternet()
  local result = internet.postURL(URL, data)
  PreviousAddresses = copyTable(MemoryAddresses)
end

-- Gets the values from CheatEngine
local function getValues()
  addressGroup = getAddressList().getMemoryRecordByDescription("Values")
  for i=0, addressGroup.Count do
    local child = addressGroup.Child[i]
    if (child and child.Value) then
      local status, value = pcall(function() return math.floor(child.Value) end)
      if status then
        MemoryAddresses[child.Description] = value -- Add the value to the data table
      end
    end
  end
end

-- Main loop
local function onTimerTick()
  getValues()
  if MemoryAddresses['IsInMatch'] == 1 then
    speedhack_setSpeed(GameSpeed)
  else
    speedhack_setSpeed(1)
  end
  if has_value(DiffHandler, "standing") then
    if (MemoryAddresses["P1Standing"] ~= PreviousAddresses["P1Standing"] or MemoryAddresses["P2Standing"] ~= PreviousAddresses["P2Standing"] or MemoryAddresses["P3Standing"] ~= PreviousAddresses["P3Standing"] or MemoryAddresses["P4Standing"] ~= PreviousAddresses["P4Standing"]) then
      sendToServer(MemoryAddresses)
      return nil
    end
  end
  if has_value(DiffHandler, "character") then
    if (MemoryAddresses["P1Character"] ~= PreviousAddresses["P1Character"] or MemoryAddresses["P2Character"] ~= PreviousAddresses["P2Character"] or MemoryAddresses["P3Character"] ~= PreviousAddresses["P3Character"] or MemoryAddresses["P4Character"] ~= PreviousAddresses["P4Character"]) then
      sendToServer(MemoryAddresses)
      return nil
    end
  end
  if has_value(DiffHandler, "percentage") then
    if (MemoryAddresses["P1Percentage"] ~= PreviousAddresses["P1Percentage"] or MemoryAddresses["P2Percentage"] ~= PreviousAddresses["P2Percentage"] or MemoryAddresses["P3Percentage"] ~= PreviousAddresses["P3Percentage"] or MemoryAddresses["P4Percentage"] ~= PreviousAddresses["P4Percentage"]) then
      sendToServer(MemoryAddresses)
      return nil
    end
  end
  if next(DiffHandler) == nil then -- this means table is empty
    for index, value in pairs(MemoryAddresses) do
      if value ~= PreviousAddresses[index] then
        sendToServer(MemoryAddresses)
        return nil
      end
    end
  end
end


[ENABLE]

local id = memrec.ID
local t = scriptTimers[id]

if t then
  t.Enabled = true
else
  scriptTimers[id] = createTimer()
  t = scriptTimers[id]
  t.Interval = poll_rate
  t.OnTimer = onTimerTick
end

[DISABLE]

local t = scriptTimers[memrec.ID]
if t then
  t.Enabled = false
end

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>188</Key>
          </Keys>
          <Description>Enable Everything</Description>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Poll For Memory Addresses"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
-- Helper functions
local function tableLength(table)
  local count = 0
  for _ in pairs(table) do count = count + 1 end
  return count
end
local function hasValue (table, val)
  for index, value in ipairs(table) do
      if value == val then
          return true
      end
  end
  return false
end

KOAddr = "RivalsofAether.exe+3C04E5F"
PercentageAddr = "RivalsofAether.exe+3C04D5F"
StandingsAddr = "RivalsofAether.exe+3C04C69"
CharactersAddr = "RivalsofAether.exe+1D7E381"
IsInMatchAddr = "RivalsofAether.exe+2C14A0A"
WorkshopAddr = "RivalsofAether.exe+3D0C5AC"

[ENABLE]

-- Find the KO counter addresses
-- ref: mov [eax],00000000 mov [esi+24],0000011C test [esi+44],00FFFFFF
-- print("Finding KO Addresses")
foundKOlist = {}
debug_setBreakpoint(KOAddr,function()
  -- print(string.format("%X",EAX))
  if not foundKOlist[EAX] then
    local index = string.sub(string.format("%X",EAX), -2, -2)
    local name = "P"..index.."StocksLost"
    -- print(name)
    if hasValue({'1', '2', '3', '4'}, index) then
      local valuesMemaddr = getAddressList().getMemoryRecordByDescription("Values")
      local memaddr = getAddressList().createMemoryRecord()
      memaddr.Description = name
      memaddr.Address = EAX
      memaddr.VarType = vtDouble
      memaddr.appendToEntry(valuesMemaddr)
      foundKOlist[EAX]=true
    end
    if tableLength(foundKOlist) == 4 then
      -- print("All KO addresses found")
      debug_removeBreakpoint(KOAddr)
    end
  end
end)

-- Find the percentage addresses
-- ref: mov [eax],00000000 mov [esi+24],0000011A test [esi+44],00FFFFFF
-- print("Finding percentage addresses")
foundPercentagelist = {}
debug_setBreakpoint(PercentageAddr,function()
  -- print(string.format("%X",EAX))
  if not foundPercentagelist[EAX] then
    local index = string.sub(string.format("%X",EAX), -2, -2)
    local name = "P"..index.."Percentage"
    if hasValue({'1', '2', '3', '4'}, index) then
      local valuesMemaddr = getAddressList().getMemoryRecordByDescription("Values")
      local memaddr = getAddressList().createMemoryRecord()
      memaddr.Description = name
      memaddr.Address = EAX
      memaddr.VarType = vtDouble
      memaddr.appendToEntry(valuesMemaddr)
      foundPercentagelist[EAX]=true
    end
    if tableLength(foundPercentagelist) == 4 then
      -- print("All percentage addresses found")
      debug_removeBreakpoint(PercentageAddr)
    end
  end
end)

-- Find the standing addresses
-- ref: mov [eax],00000000 mov [esi+24],00000118 test [esi+44],00FFFFFF
-- print("Finding standing addresses")
foundStandinglist = {}
debug_setBreakpoint(StandingsAddr,function()
  -- print(string.format("%X",EAX))
  if not foundStandinglist[EAX] then
    local index = string.sub(string.format("%X",EAX), -2, -2)
    local name = "P"..index.."Standing"
    if hasValue({'1', '2', '3', '4'}, index) then
      local valuesMemaddr = getAddressList().getMemoryRecordByDescription("Values")
      local memaddr = getAddressList().createMemoryRecord()
      memaddr.Description = name
      memaddr.Address = EAX
      memaddr.VarType = vtDouble
      memaddr.appendToEntry(valuesMemaddr)
      foundStandinglist[EAX]=true
    end
    if tableLength(foundStandinglist) == 4 then
      -- print("All standing addresses found")
      debug_removeBreakpoint(StandingsAddr)
    end
  end
end)

-- Find the character ID addresses
-- ref: movsd xmm0,[eax] movsd xmm1,[eax+08] mov eax,00FFFFFF movsd [esi+20],xmm1 movsd [esi+18],xmm0 and eax,[esi+24] cmp eax,02
-- print("Finding character addresses")
foundCharacterIDlist = {}
debug_setBreakpoint(CharactersAddr,function()
  -- print(string.format("%X",EAX))
  if not foundCharacterIDlist[EAX] then
    local index = string.sub(string.format("%X",EAX), -2, -2)
    local name = "P"..index.."Character"
    if hasValue({'1', '2', '3', '4'}, index) then
      local valuesMemaddr = getAddressList().getMemoryRecordByDescription("Values")
      local memaddr = getAddressList().createMemoryRecord()
      memaddr.Description = name
      memaddr.Address = EAX
      memaddr.VarType = vtDouble
      memaddr.appendToEntry(valuesMemaddr)
      foundCharacterIDlist[EAX]=true
    end
    if tableLength(foundCharacterIDlist) == 4 then
      -- print("All characters found")
      debug_removeBreakpoint(CharactersAddr)
    end
  end
end)

-- Find the workshop setting address
-- ref: movsd [eax],xmm0 mov [esi+2C],00000009 mov eax,[esi+3C] dec eax
-- print("Finding workshop setting address")
debug_setBreakpoint(WorkshopAddr,function()
  -- print(string.format("%X",EAX))
  local name = "IsWorkshopEnabled"
  local valuesMemaddr = getAddressList().getMemoryRecordByDescription("Values")
  local memaddr = getAddressList().createMemoryRecord()
  memaddr.Description = name
  memaddr.Address = EAX
  memaddr.VarType = vtDouble
  memaddr.appendToEntry(valuesMemaddr)
  -- print("Workshop setting address found")
  debug_removeBreakpoint(WorkshopAddr)
end)

-- Find the "is in match" address
-- ref: mov [eax+0C],00000000 mov [eax+04],3FF00000 !!!!mov [eax],00000000 mov eax,[ebp-2C]
-- print("Finding 'is not in match' address")
-- debug_setBreakpoint(IsInMatchAddr,function()
--   -- print(string.format("%X",EAX))
--   local name = "IsInMatch"
--   local valuesMemaddr = getAddressList().getMemoryRecordByDescription("Values")
--   local memaddr = getAddressList().createMemoryRecord()
--   memaddr.Description = name
--   memaddr.Address = EAX
--   memaddr.VarType = vtDouble
--   memaddr.appendToEntry(valuesMemaddr)
--   -- print("'Is in match' address found")
--   debug_removeBreakpoint(IsInMatchAddr)
-- end)

[DISABLE]
-- print("Disabling breakpoints")
debug_removeBreakpoint(KOAddr)
debug_removeBreakpoint(PercentageAddr)
debug_removeBreakpoint(StandingsAddr)
debug_removeBreakpoint(CharactersAddr)
debug_removeBreakpoint(WorkshopAddr)
debug_removeBreakpoint(IsInMatchAddr)
local valuesMemaddr = getAddressList().getMemoryRecordByDescription("Values")
if valuesMemaddr ~= nil and valuesMemaddr.Count &gt; 0 then
  while valuesMemaddr.Count &gt; 0 do
    valuesMemaddr.Child[0]:Delete()
  end
end
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>188</Key>
          </Keys>
          <Description>Enable Everything</Description>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Values"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>gml_CScriptList</Name>
      <Address>67E6E1C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>gml_ObjectArray</Name>
      <Address>67E6E04</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>gml_GlobalVariables</Name>
      <Address>67D6268</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>gml_StringsList</Name>
      <Address>674F79C</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>80A1592D</Address>
      <Header>CHECK OWNED
</Header>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
